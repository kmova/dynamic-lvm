name: Pull Request CI

on:
  pull_request:
    branches:
      - develop
      - "release/**"
    paths-ignore:
      - "*.md"
      - "BUILDMETA"
      - "changelogs/**"
      - "docs/**"
      - "design/**"
      - "LICENSE"
      - "MAINTAINERS"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go 1.19
        uses: actions/setup-go@v5
        with:
          go-version: 1.19.9
          cache: false

      - name: Set go env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV

      - name: Lint Check
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.56.2
          args: -E exportloopref,dupl,revive,bodyclose,goconst,misspell -D structcheck --timeout 5m0s

      - name: Shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          path: "."
          pattern: "*.sh"

      - uses: cachix/install-nix-action@v22
      - uses: rrbutani/use-nix-shell-action@v1.1.0
        env:
          HOME: /home/runner
        with:
          file: shell.nix

      - name: Check if the chart follows a valid semver version
        run: |
          branch_name="${{ github.event.pull_request.base.ref }}"
          ./scripts/validate-chart-version.sh --branch $branch_name

      - name: Run chart-testing lint
        run: |
          ct lint --config ct.yaml

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go 1.19
        uses: actions/setup-go@v5
        with:
          go-version: 1.19.9
          cache: false

      - name: Set go env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV

      - name: Unit test
        run: make test

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          name: coverage-$(date +%s)
          flags: unittests

  bdd-tests:
    needs: ["unit-tests"]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        kubernetes: [v1.27.3]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go 1.19
        uses: actions/setup-go@v5
        with:
          go-version: 1.19.9
          cache: false

      - name: Set go env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV

      - name: Build images locally
        run: make lvm-driver-image

      - name: Setup Minikube-Kubernetes
        uses: medyagh/setup-minikube@latest
        with:
          cache: false
          minikube-version: 1.31.1
          driver: none
          kubernetes-version: ${{ matrix.kubernetes }}
          cni: calico
          start-args: "--install-addons=false"

      - name: Setting environment variables
        run: |
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: bootstrap
        run: make bootstrap

      - name: Running tests
        env:
          OPENEBS_NAMESPACE: "openebs"
        run: ./ci/ci-test.sh run

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./tests/bdd_coverage.txt
          name: coverage-bdd_coverage-$(date +%s)
          flags: bddtests

  csi-driver:
    runs-on: ubuntu-latest
    needs: ["lint", "unit-tests", "bdd-tests"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./buildscripts/lvm-driver/Dockerfile.buildx
          push: false
          platforms: linux/amd64, linux/arm64
