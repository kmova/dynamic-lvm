/*
Copyright 2021 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/lvm-localpv/pkg/apis/openebs.io/lvm/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LVMNodeLister helps list LVMNodes.
// All objects returned here must be treated as read-only.
type LVMNodeLister interface {
	// List lists all LVMNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LVMNode, err error)
	// LVMNodes returns an object that can list and get LVMNodes.
	LVMNodes(namespace string) LVMNodeNamespaceLister
	LVMNodeListerExpansion
}

// lVMNodeLister implements the LVMNodeLister interface.
type lVMNodeLister struct {
	indexer cache.Indexer
}

// NewLVMNodeLister returns a new LVMNodeLister.
func NewLVMNodeLister(indexer cache.Indexer) LVMNodeLister {
	return &lVMNodeLister{indexer: indexer}
}

// List lists all LVMNodes in the indexer.
func (s *lVMNodeLister) List(selector labels.Selector) (ret []*v1alpha1.LVMNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LVMNode))
	})
	return ret, err
}

// LVMNodes returns an object that can list and get LVMNodes.
func (s *lVMNodeLister) LVMNodes(namespace string) LVMNodeNamespaceLister {
	return lVMNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LVMNodeNamespaceLister helps list and get LVMNodes.
// All objects returned here must be treated as read-only.
type LVMNodeNamespaceLister interface {
	// List lists all LVMNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LVMNode, err error)
	// Get retrieves the LVMNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LVMNode, error)
	LVMNodeNamespaceListerExpansion
}

// lVMNodeNamespaceLister implements the LVMNodeNamespaceLister
// interface.
type lVMNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LVMNodes in the indexer for a given namespace.
func (s lVMNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LVMNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LVMNode))
	})
	return ret, err
}

// Get retrieves the LVMNode from the indexer for a given namespace and name.
func (s lVMNodeNamespaceLister) Get(name string) (*v1alpha1.LVMNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lvmnode"), name)
	}
	return obj.(*v1alpha1.LVMNode), nil
}
